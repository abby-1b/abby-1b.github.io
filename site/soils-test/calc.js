const MAX_PRECISION_DIGITS = 4;
const EMPTY_CALCULATION = "";
function stringify(n) {
    const fixed = n.toFixed(MAX_PRECISION_DIGITS);
    const normal = n.toString();
    return normal.length < fixed.length ? normal : fixed;
}
const CALCULATION_DELAY = 30;
let timer = CALCULATION_DELAY;
let trueCalculation = '###!';
setInterval(()=>{
    if (timer != null && timer <= 1) {
        output.innerText = trueCalculation;
        timer = null;
    } else if (timer != null) {
        timer *= 0.9;
    }
}, 10);
const output = document.querySelector('#output').children[0];
const elementPpmAl = document.querySelector('.input[purpose="ppmAl"] > input');
const elementCmolAlKg = document.querySelector('.input[purpose="cmolAlKg"] > input');
const elementFactor = document.querySelector('.input[purpose="factor"] > input');
function sliderChange(el) {
    el.nextElementSibling.innerText = parseFloat(el.value).toFixed(2);
    inputChange(el);
}
const sliders = [
    ...document.querySelectorAll('input[type="range"]')
];
sliders.map((e)=>sliderChange(e));
function inputChange(el) {
    const randDelay = CALCULATION_DELAY * (0.9 + Math.random() * 0.3);
    timer = timer == null ? randDelay : timer + randDelay;
    const elPurpose = el.parentElement.attributes.getNamedItem("purpose").value;
    let ppmAl = elementPpmAl.value == "" ? -1 : parseFloat(elementPpmAl.value);
    let cmolAlKg = elementCmolAlKg.value == "" ? -1 : parseFloat(elementCmolAlKg.value);
    let factor = elementFactor.value == "" ? -1 : parseFloat(elementFactor.value);
    output.innerText = String.fromCharCode(8226).repeat(3);
    if (ppmAl == -1 && cmolAlKg == -1) {
        trueCalculation = EMPTY_CALCULATION;
        return;
    }
    if (elPurpose == "ppmAl") {
        elementCmolAlKg.value = ppmAl == -1 ? "" : stringify(ppmAl / 90);
        cmolAlKg = ppmAl == -1 ? -1 : parseFloat(elementCmolAlKg.value);
    } else if (elPurpose == "cmolAlKg") {
        elementPpmAl.value = cmolAlKg == -1 ? "" : stringify(cmolAlKg * 90);
        ppmAl = cmolAlKg == -1 ? -1 : parseFloat(elementPpmAl.value);
    }
    if (ppmAl == -1 && cmolAlKg == -1) {
        trueCalculation = EMPTY_CALCULATION;
        return;
    }
    trueCalculation = stringify(factor * cmolAlKg) + " t/ha";
}

//# sourceMappingURL=data:application/json;base64,