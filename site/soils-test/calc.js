const MAX_PRECISION_DIGITS = 3;
const EMPTY_CALCULATION = "";
function stringify(n) {
    const fixed = n.toFixed(MAX_PRECISION_DIGITS);
    const normal = n.toString();
    return normal.length < fixed.length ? normal : fixed;
}
const CALCULATION_DELAY = 10;
let timer = CALCULATION_DELAY;
let trueCalculation = [
    EMPTY_CALCULATION,
    EMPTY_CALCULATION
];
setInterval(()=>{
    if (timer != null && timer <= 1) {
        if (trueCalculation[0].length == 0) {
            output[0].innerText = "";
            output[1].innerText = "";
        } else {
            output[0].innerHTML = "<a>" + trueCalculation[0].replace(/ /, "</a>&nbsp;&nbsp;<a>") + "</a>";
            output[1].innerHTML = "<a>" + trueCalculation[1].replace(/ /, "</a>&nbsp;&nbsp;<a>") + "</a>";
        }
        timer = null;
    } else if (timer != null) {
        timer *= 0.9;
    }
}, 10);
const output = [
    ...document.querySelector('#output').children
];
const elementPpmAl = document.querySelector('.input[purpose="ppmAl"] > input');
const elementCmolAlKg = document.querySelector('.input[purpose="cmolAlKg"] > input');
const elementFactor = document.querySelector('.input[purpose="factor"] > input');
let textForPpmAl = "";
let textForCmolAlKg = "";
function sliderChange(el) {
    el.nextElementSibling.innerText = parseFloat(el.value).toFixed(2);
    inputChange(el);
}
const sliders = [
    ...document.querySelectorAll('input[type="range"]')
];
sliders.map((e)=>sliderChange(e));
function inputChange(el) {
    const randDelay = CALCULATION_DELAY * (0.9 + Math.random() * 0.3);
    timer = timer == null ? randDelay : timer + randDelay;
    const elPurpose = el.parentElement.attributes.getNamedItem("purpose").value;
    let ppmAl = elementPpmAl.value == "" ? -1 : parseFloat(elementPpmAl.value);
    let cmolAlKg = elementCmolAlKg.value == "" ? -1 : parseFloat(elementCmolAlKg.value);
    let factor = elementFactor.value == "" ? -1 : parseFloat(elementFactor.value);
    output[0].innerHTML = output[1].innerHTML = "<a>" + String.fromCharCode(8226).repeat(3) + "</a>";
    if (ppmAl == -1 && cmolAlKg == -1) {
        trueCalculation = [
            EMPTY_CALCULATION,
            EMPTY_CALCULATION
        ];
        return;
    }
    if (elPurpose == "ppmAl") {
        elementCmolAlKg.value = ppmAl == -1 ? "" : stringify(ppmAl / 90);
        cmolAlKg = ppmAl == -1 ? -1 : parseFloat(elementCmolAlKg.value);
    } else if (elPurpose == "cmolAlKg") {
        elementPpmAl.value = cmolAlKg == -1 ? "" : stringify(cmolAlKg * 90);
        ppmAl = cmolAlKg == -1 ? -1 : parseFloat(elementPpmAl.value);
    }
    if (ppmAl == -1 && cmolAlKg == -1) {
        trueCalculation = [
            EMPTY_CALCULATION,
            EMPTY_CALCULATION
        ];
        return;
    }
    const THA_TO_LBFTSQ_CONSTANT = 20.481606212;
    const tHa = factor * cmolAlKg;
    const lbFtSq = tHa * THA_TO_LBFTSQ_CONSTANT;
    trueCalculation = [
        stringify(tHa) + ` ${textForPpmAl}`,
        stringify(lbFtSq) + ` ${textForCmolAlKg}\xb2`, 
    ];
}
const changeLanguageButton = document.querySelector("#switch-button");
changeLanguageButton.addEventListener('click', ()=>{
    if (lang == "es") {
        window.location.href = window.location.origin + "/?lang=en";
    } else {
        window.location.href = window.location.origin + "/?lang=es";
    }
});
const translationTargets = [
    (t1)=>document.title = t1,
    (t2)=>changeLanguageButton.value = t2,
    (t3)=>document.querySelector('#title>h1').innerHTML = t3,
    (t4)=>document.querySelector('[purpose="ppmAl"]>h2').innerHTML = t4,
    (t5)=>document.querySelector('[purpose="cmolAlKg"]>h2').innerHTML = t5,
    (t6)=>document.querySelector('[purpose="factor"]>h2').innerHTML = t6,
    (t7)=>textForPpmAl = t7,
    (t8)=>textForCmolAlKg = t8, 
];
const searchParams = new URLSearchParams(window.location.search);
let lang = (searchParams.get("lang") ?? "en").toLowerCase();
if (!(lang in translations)) {
    lang = "en";
}
const t = translations[lang];
for(let i = 0; i < t.length; i++){
    translationTargets[i](t[i]);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbGMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5kZWNsYXJlIGxldCB0cmFuc2xhdGlvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPjtcblxuLyoqIEhvdyBtYW55IGRlY2ltYWwgZGlnaXRzIHRvIGtlZXAgKi9cbmNvbnN0IE1BWF9QUkVDSVNJT05fRElHSVRTID0gMztcblxuLyoqIFdoYXQgdG8gZGlzcGxheSB3aGVuIGEgY2FsY3VsYXRpb24gcmV0dXJucyBub3RoaW5nLiAqL1xuY29uc3QgRU1QVFlfQ0FMQ1VMQVRJT04gPSBcIlwiO1xuXG4vKiogQ29udmVydHMgYSBudW1iZXIgdG8gYSBzdHJpbmcsIGJ1dCBrZWVwaW5nIGl0IHByZXR0eS4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeShuOiBudW1iZXIpOiBzdHJpbmcge1xuXHRjb25zdCBmaXhlZCA9IG4udG9GaXhlZChNQVhfUFJFQ0lTSU9OX0RJR0lUUyk7XG5cdGNvbnN0IG5vcm1hbCA9IG4udG9TdHJpbmcoKTtcblx0cmV0dXJuIG5vcm1hbC5sZW5ndGggPCBmaXhlZC5sZW5ndGggPyBub3JtYWwgOiBmaXhlZDtcbn1cblxuLyoqIFNlZSBiZWxvdy4gKi9cbmNvbnN0IENBTENVTEFUSU9OX0RFTEFZID0gMTA7XG5cbi8qXG5EZWxheWluZyB0aGUgY2FsY3VsYXRpb24gZ2l2ZXMgdGhlIHVzZXIgdGltZSB0byBub3RpY2UgdGhhdCB0aGVpciBjaGFuZ2UgaXNcbmJlaW5nIGFjY291bnRlZCBmb3IuIFdpdGhvdXQgdGhpcyBzaW1wbGUgdGltZW91dCwgdGhlIHVzZXIgbWlnaHQgdGhpbmsgXCJPaCwgaXNcbml0IG5vdCB3b3JraW5nPyBJdCdzIGdvaW5nIHRvbyBmYXN0IVwiXG5JdCBnaXZlcyB0aGUgaW1wcmVzc2lvbiB0aGF0IHNvbWV0aGluZyBoZWF2aWVyIGlzIGJlaW5nIGRvbmUgb24gdGhlIGJhY2tlbmQsXG5zb21lIGluZ2VuaW91cyBjYWxjdWxhdGlvbiB0aGF0IGNhbiBzb2x2ZSBhbGwgdGhlaXIgcHJvYmxlbXMuXG5JZiB1c2VycyBjb21wbGFpbiB0aGF0IGl0J3MgdG9vIHNsb3csIGxvd2VyIHRoZSBkZWxheSBhYm92ZS4gSWYgdGhlIGFwcCBpc1xuZmxvb2RlZCB3aXRoIGlzc3VlcyBhYm91dCBzbG93IGludGVybmV0IG9yIGEgYmFkIGNhbGN1bGF0b3IsIGxvd2VyIHRoZSBkZWxheVxuYWJvdmU7IGJ1dCBuZXZlciBtYWtlIGl0IHplcm8uIEl0J3MgYWxsIGFib3V0IG1ha2luZyB0aGUgdXNlciBmZWVsIHNhZmVyIGtub3dpbmdcbnRoYXQgdGhlaXIgY2FsY3VsYXRpb25zIHRha2UgdGltZSBhbmQgZWZmb3J0LlxuKi9cbmxldCB0aW1lcjogbnVtYmVyIHwgbnVsbCA9IENBTENVTEFUSU9OX0RFTEFZO1xubGV0IHRydWVDYWxjdWxhdGlvbjogWyBzdHJpbmcsIHN0cmluZyBdID0gWyBFTVBUWV9DQUxDVUxBVElPTiwgRU1QVFlfQ0FMQ1VMQVRJT04gXTtcbnNldEludGVydmFsKCgpID0+IHtcblx0aWYgKHRpbWVyICE9IG51bGwgJiYgdGltZXIgPD0gMSkge1xuXHRcdGlmICh0cnVlQ2FsY3VsYXRpb25bMF0ubGVuZ3RoID09IDApIHtcblx0XHRcdG91dHB1dFswXS5pbm5lclRleHQgPSBcIlwiO1xuXHRcdFx0b3V0cHV0WzFdLmlubmVyVGV4dCA9IFwiXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dHB1dFswXS5pbm5lckhUTUwgPSBcIjxhPlwiICsgdHJ1ZUNhbGN1bGF0aW9uWzBdLnJlcGxhY2UoLyAvLCBcIjwvYT4mbmJzcDsmbmJzcDs8YT5cIikgKyBcIjwvYT5cIjtcblx0XHRcdG91dHB1dFsxXS5pbm5lckhUTUwgPSBcIjxhPlwiICsgdHJ1ZUNhbGN1bGF0aW9uWzFdLnJlcGxhY2UoLyAvLCBcIjwvYT4mbmJzcDsmbmJzcDs8YT5cIikgKyBcIjwvYT5cIjtcblx0XHR9XG5cdFx0dGltZXIgPSBudWxsO1xuXHR9IGVsc2UgaWYgKHRpbWVyICE9IG51bGwpIHtcblx0XHR0aW1lciAqPSAwLjk7XG5cdH1cbn0sIDEwKVxuXG4vLyBHZXQgdGhlIG91dHB1dCB0ZXh0Ym94XG5jb25zdCBvdXRwdXQgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI291dHB1dCcpIS5jaGlsZHJlbl0gYXMgSFRNTEVsZW1lbnRbXTtcblxuLy8gR2V0IHRoZSBpbnB1dCBlbGVtZW50c1xuY29uc3QgZWxlbWVudFBwbUFsOiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0W3B1cnBvc2U9XCJwcG1BbFwiXSA+IGlucHV0JykhO1xuY29uc3QgZWxlbWVudENtb2xBbEtnOiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0W3B1cnBvc2U9XCJjbW9sQWxLZ1wiXSA+IGlucHV0JykhO1xuY29uc3QgZWxlbWVudEZhY3RvcjogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dFtwdXJwb3NlPVwiZmFjdG9yXCJdID4gaW5wdXQnKSE7XG5cbi8vIFRoZSB0ZXh0IGZvciB0aGUgdW5pdHNcbmxldCB0ZXh0Rm9yUHBtQWwgPSBcIlwiO1xubGV0IHRleHRGb3JDbW9sQWxLZyA9IFwiXCI7XG5cbi8qKiBDYWxsZWQgd2hlbiBhbnkgc2xpZGVyIGlzIGNoYW5nZWQgKi9cbmZ1bmN0aW9uIHNsaWRlckNoYW5nZShlbDogSFRNTElucHV0RWxlbWVudCkge1xuXHQoZWwubmV4dEVsZW1lbnRTaWJsaW5nIGFzIEhUTUxEaXZFbGVtZW50KS5pbm5lclRleHQgPSBwYXJzZUZsb2F0KGVsLnZhbHVlKS50b0ZpeGVkKDIpO1xuXHRpbnB1dENoYW5nZShlbCk7XG59XG5cbi8vIEluaXRpYXRlIHRoZSBzbGlkZXJzXG5jb25zdCBzbGlkZXJzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJyYW5nZVwiXScpXTtcbnNsaWRlcnMubWFwKGUgPT4gc2xpZGVyQ2hhbmdlKGUgYXMgSFRNTElucHV0RWxlbWVudCkpO1xuXG4vKiogQ2FsbGVkIHdoZW4gYW55IGlucHV0IGlzIGNoYW5nZWQgKGluY2x1ZGluZyBzbGlkZXJzKSAqL1xuZnVuY3Rpb24gaW5wdXRDaGFuZ2UoZWw6IEhUTUxJbnB1dEVsZW1lbnQpIHtcblx0Ly8gUmFuZG9taXplIHRoZSBkZWxheVxuXHRjb25zdCByYW5kRGVsYXkgPSBDQUxDVUxBVElPTl9ERUxBWSAqICgwLjkgKyBNYXRoLnJhbmRvbSgpICogMC4zKTtcblx0dGltZXIgPSB0aW1lciA9PSBudWxsID8gcmFuZERlbGF5IDogdGltZXIgKyByYW5kRGVsYXk7XG5cblx0Ly8gR2V0IHRoZSBlbGVtZW50IHRoYXQgd2UncmUgY2hhbmdpbmcgKGJ5IHB1cnBvc2UpXG5cdGNvbnN0IGVsUHVycG9zZSA9IGVsLnBhcmVudEVsZW1lbnQhLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKFwicHVycG9zZVwiKSEudmFsdWU7XG5cdFxuXHQvLyBHZXQgdGhlIEFsIHBwbVxuXHRsZXQgcHBtQWwgPSBlbGVtZW50UHBtQWwudmFsdWUgPT0gXCJcIiA/IC0xIDogcGFyc2VGbG9hdChlbGVtZW50UHBtQWwudmFsdWUpO1xuXHRcblx0Ly8gR2V0IHRoZSBBbC9rZyBjbW9sIG9mIHNvaWxcblx0bGV0IGNtb2xBbEtnID0gZWxlbWVudENtb2xBbEtnLnZhbHVlID09IFwiXCIgPyAtMSA6IHBhcnNlRmxvYXQoZWxlbWVudENtb2xBbEtnLnZhbHVlKTtcblxuXHQvLyBHZXQgdGhlIGZhY3RvclxuXHRsZXQgZmFjdG9yID0gZWxlbWVudEZhY3Rvci52YWx1ZSA9PSBcIlwiID8gLTEgOiBwYXJzZUZsb2F0KGVsZW1lbnRGYWN0b3IudmFsdWUpO1xuXG5cdC8vIFB1dCB0aGUgcHJvY2Vzc2luZyBkb3RzLi4uXG5cdG91dHB1dFswXS5pbm5lckhUTUwgPSBvdXRwdXRbMV0uaW5uZXJIVE1MID0gXG5cdFx0XCI8YT5cIiArIFN0cmluZy5mcm9tQ2hhckNvZGUoODIyNikucmVwZWF0KDMpICsgXCI8L2E+XCI7XG5cblx0aWYgKHBwbUFsID09IC0xICYmIGNtb2xBbEtnID09IC0xKSB7XG5cdFx0dHJ1ZUNhbGN1bGF0aW9uID0gWyBFTVBUWV9DQUxDVUxBVElPTiwgRU1QVFlfQ0FMQ1VMQVRJT04gXTtcblx0XHRyZXR1cm47XG5cdH1cblx0XG5cdGlmIChlbFB1cnBvc2UgPT0gXCJwcG1BbFwiKSB7XG5cdFx0ZWxlbWVudENtb2xBbEtnLnZhbHVlID0gcHBtQWwgPT0gLTEgPyBcIlwiIDogc3RyaW5naWZ5KHBwbUFsIC8gOTApO1xuXHRcdGNtb2xBbEtnID0gcHBtQWwgPT0gLTEgPyAtMSA6IHBhcnNlRmxvYXQoZWxlbWVudENtb2xBbEtnLnZhbHVlKTtcblx0fSBlbHNlIGlmIChlbFB1cnBvc2UgPT0gXCJjbW9sQWxLZ1wiKSB7XG5cdFx0ZWxlbWVudFBwbUFsLnZhbHVlID0gY21vbEFsS2cgPT0gLTEgPyBcIlwiIDogc3RyaW5naWZ5KGNtb2xBbEtnICogOTApO1xuXHRcdHBwbUFsID0gY21vbEFsS2cgPT0gLTEgPyAtMSA6IHBhcnNlRmxvYXQoZWxlbWVudFBwbUFsLnZhbHVlKTtcblx0fVxuXG5cdGlmIChwcG1BbCA9PSAtMSAmJiBjbW9sQWxLZyA9PSAtMSkge1xuXHRcdHRydWVDYWxjdWxhdGlvbiA9IFsgRU1QVFlfQ0FMQ1VMQVRJT04sIEVNUFRZX0NBTENVTEFUSU9OIF07XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gQ2FDTzMgKHQvaGEpID0gRmFjdG9yIHggY21vbCBBbC9rZyBvZiBzb2lsXG5cdC8vIChwcG0gQWwpIG9yIChtZy9rZyBBbCkgLyA5MCA9IGNtb2wgQWwva2cgb2Ygc29pbFxuXG5cdGNvbnN0IFRIQV9UT19MQkZUU1FfQ09OU1RBTlQgPSAyMC40ODE2MDYyMTI7XG5cdGNvbnN0IHRIYSA9IGZhY3RvciAqIGNtb2xBbEtnO1xuXHRjb25zdCBsYkZ0U3EgPSB0SGEgKiBUSEFfVE9fTEJGVFNRX0NPTlNUQU5UO1xuXG5cdHRydWVDYWxjdWxhdGlvbiA9IFtcblx0XHRzdHJpbmdpZnkoIHRIYSApICsgYCAke3RleHRGb3JQcG1BbH1gLFxuXHRcdHN0cmluZ2lmeSggbGJGdFNxICkgKyBgICR7dGV4dEZvckNtb2xBbEtnfVxceGIyYCxcblx0XTtcbn1cblxuLy8gR2V0IHRoZSBcIlN3aXRjaCBMYW5ndWFnZVwiIGJ1dG9uXG5jb25zdCBjaGFuZ2VMYW5ndWFnZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3dpdGNoLWJ1dHRvblwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuY2hhbmdlTGFuZ3VhZ2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cdGlmIChsYW5nID09IFwiZXNcIikge1xuXHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIFwiLz9sYW5nPWVuXCI7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgXCIvP2xhbmc9ZXNcIjtcblx0fVxufSk7XG5cbi8vIFRyYW5zbGF0aW9uIHRhcmdldHNcbmNvbnN0IHRyYW5zbGF0aW9uVGFyZ2V0czogQXJyYXk8KHQ6IHN0cmluZykgPT4gdm9pZD4gPSBbXG5cdHQgPT4gZG9jdW1lbnQudGl0bGUgPSB0LFxuXHR0ID0+IGNoYW5nZUxhbmd1YWdlQnV0dG9uLnZhbHVlID0gdCxcblx0dCA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGl0bGU+aDEnKSEuaW5uZXJIVE1MID0gdCxcblx0dCA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbcHVycG9zZT1cInBwbUFsXCJdPmgyJykhLmlubmVySFRNTCA9IHQsXG5cdHQgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW3B1cnBvc2U9XCJjbW9sQWxLZ1wiXT5oMicpIS5pbm5lckhUTUwgPSB0LFxuXHR0ID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1twdXJwb3NlPVwiZmFjdG9yXCJdPmgyJykhLmlubmVySFRNTCA9IHQsXG5cdHQgPT4gdGV4dEZvclBwbUFsID0gdCxcblx0dCA9PiB0ZXh0Rm9yQ21vbEFsS2cgPSB0LFxuXTtcblxuLy8gVHJhbnNsYXRlICh3aGVuIFVSTCBwb2ludHMgdG8gdHJhbnNsYXRlZCB2ZXJzaW9uKVxuY29uc3Qgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbmxldCBsYW5nID0gKHNlYXJjaFBhcmFtcy5nZXQoXCJsYW5nXCIpID8/IFwiZW5cIikudG9Mb3dlckNhc2UoKTtcbmlmICghKGxhbmcgaW4gdHJhbnNsYXRpb25zKSkgeyBsYW5nID0gXCJlblwiOyB9XG5cbi8vIFRyYW5zbGF0ZSB0byB0aGUgbGFuZ3VhZ2UhXG5jb25zdCB0ID0gdHJhbnNsYXRpb25zW2xhbmddO1xuZm9yIChsZXQgaSA9IDA7IGkgPCB0Lmxlbmd0aDsgaSsrKSB7XG5cdHRyYW5zbGF0aW9uVGFyZ2V0c1tpXSh0W2ldKTtcbn1cbiJdLCJuYW1lcyI6WyJNQVhfUFJFQ0lTSU9OX0RJR0lUUyIsIkVNUFRZX0NBTENVTEFUSU9OIiwic3RyaW5naWZ5IiwibiIsImZpeGVkIiwidG9GaXhlZCIsIm5vcm1hbCIsInRvU3RyaW5nIiwibGVuZ3RoIiwiQ0FMQ1VMQVRJT05fREVMQVkiLCJ0aW1lciIsInRydWVDYWxjdWxhdGlvbiIsInNldEludGVydmFsIiwib3V0cHV0IiwiaW5uZXJUZXh0IiwiaW5uZXJIVE1MIiwicmVwbGFjZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNoaWxkcmVuIiwiZWxlbWVudFBwbUFsIiwiZWxlbWVudENtb2xBbEtnIiwiZWxlbWVudEZhY3RvciIsInRleHRGb3JQcG1BbCIsInRleHRGb3JDbW9sQWxLZyIsInNsaWRlckNoYW5nZSIsImVsIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicGFyc2VGbG9hdCIsInZhbHVlIiwiaW5wdXRDaGFuZ2UiLCJzbGlkZXJzIiwicXVlcnlTZWxlY3RvckFsbCIsIm1hcCIsImUiLCJyYW5kRGVsYXkiLCJNYXRoIiwicmFuZG9tIiwiZWxQdXJwb3NlIiwicGFyZW50RWxlbWVudCIsImF0dHJpYnV0ZXMiLCJnZXROYW1lZEl0ZW0iLCJwcG1BbCIsImNtb2xBbEtnIiwiZmFjdG9yIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmVwZWF0IiwiVEhBX1RPX0xCRlRTUV9DT05TVEFOVCIsInRIYSIsImxiRnRTcSIsImNoYW5nZUxhbmd1YWdlQnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxhbmciLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJvcmlnaW4iLCJ0cmFuc2xhdGlvblRhcmdldHMiLCJ0IiwidGl0bGUiLCJzZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJzZWFyY2giLCJnZXQiLCJ0b0xvd2VyQ2FzZSIsInRyYW5zbGF0aW9ucyIsImkiXSwibWFwcGluZ3MiOiJBQUlBLE1BQU1BLG9CQUFvQixHQUFHLENBQUMsQUFBQztBQUcvQixNQUFNQyxpQkFBaUIsR0FBRyxFQUFFLEFBQUM7QUFHN0IsU0FBU0MsU0FBUyxDQUFDQyxDQUFTLEVBQVU7SUFDckMsTUFBTUMsS0FBSyxHQUFHRCxDQUFDLENBQUNFLE9BQU8sQ0FBQ0wsb0JBQW9CLENBQUMsQUFBQztJQUM5QyxNQUFNTSxNQUFNLEdBQUdILENBQUMsQ0FBQ0ksUUFBUSxFQUFFLEFBQUM7SUFDNUIsT0FBT0QsTUFBTSxDQUFDRSxNQUFNLEdBQUdKLEtBQUssQ0FBQ0ksTUFBTSxHQUFHRixNQUFNLEdBQUdGLEtBQUssQ0FBQztDQUNyRDtBQUdELE1BQU1LLGlCQUFpQixHQUFHLEVBQUUsQUFBQztBQWE3QixJQUFJQyxLQUFLLEdBQWtCRCxpQkFBaUIsQUFBQztBQUM3QyxJQUFJRSxlQUFlLEdBQXVCO0lBQUVWLGlCQUFpQjtJQUFFQSxpQkFBaUI7Q0FBRSxBQUFDO0FBQ25GVyxXQUFXLENBQUMsSUFBTTtJQUNqQixJQUFJRixLQUFLLElBQUksSUFBSSxJQUFJQSxLQUFLLElBQUksQ0FB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