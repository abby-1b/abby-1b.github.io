const MAX_PRECISION_DIGITS = 3;
const EMPTY_CALCULATION = "";
function stringify(n) {
    const fixed = n.toFixed(MAX_PRECISION_DIGITS);
    const normal = n.toString();
    return normal.length < fixed.length ? normal : fixed;
}
const CALCULATION_DELAY = 10;
let timer = CALCULATION_DELAY;
let trueCalculation = [
    EMPTY_CALCULATION,
    EMPTY_CALCULATION
];
setInterval(()=>{
    if (timer != null && timer <= 1) {
        if (trueCalculation[0].length == 0) {
            document.querySelector('#output').children[0].innerText = "";
            document.querySelector('#output').children[1].innerText = "";
        } else {
            document.querySelector('#output').children[0].innerHTML = "<a>" + trueCalculation[0].replace(/ /, "</a>&nbsp;&nbsp;<a>") + "</a>";
            document.querySelector('#output').children[1].innerHTML = "<a>" + trueCalculation[1].replace(/ /, "</a>&nbsp;&nbsp;<a>") + "</a>";
        }
        timer = null;
    } else if (timer != null) {
        timer *= 0.9;
    }
}, 10);
const elementPpmAl = document.querySelector('.input[purpose="ppmAl"] > input');
const elementCmolAlKg = document.querySelector('.input[purpose="cmolAlKg"] > input');
const elementFactor = document.querySelector('.input[purpose="factor"] > input');
let textForPpmAl = "";
let textForCmolAlKg = "";
function sliderChange(el) {
    el.nextElementSibling.innerText = parseFloat(el.value).toFixed(2);
    inputChange(el);
}
const sliders = [
    ...document.querySelectorAll('input[type="range"]')
];
sliders.map((e)=>sliderChange(e));
function inputChange(el) {
    const randDelay = CALCULATION_DELAY * (0.9 + Math.random() * 0.3);
    timer = timer == null ? randDelay : timer + randDelay;
    const elPurpose = el.parentElement.attributes.getNamedItem("purpose").value;
    let ppmAl = elementPpmAl.value == "" ? -1 : parseFloat(elementPpmAl.value);
    let cmolAlKg = elementCmolAlKg.value == "" ? -1 : parseFloat(elementCmolAlKg.value);
    let factor = elementFactor.value == "" ? -1 : parseFloat(elementFactor.value);
    document.querySelector('#output').children[0].innerHTML = document.querySelector('#output').children[1].innerHTML = "<a>" + String.fromCharCode(8226).repeat(3) + "</a>";
    if (ppmAl == -1 && cmolAlKg == -1) {
        trueCalculation = [
            EMPTY_CALCULATION,
            EMPTY_CALCULATION
        ];
        return;
    }
    if (elPurpose == "ppmAl") {
        elementCmolAlKg.value = ppmAl == -1 ? "" : stringify(ppmAl / 90);
        cmolAlKg = ppmAl == -1 ? -1 : parseFloat(elementCmolAlKg.value);
    } else if (elPurpose == "cmolAlKg") {
        elementPpmAl.value = cmolAlKg == -1 ? "" : stringify(cmolAlKg * 90);
        ppmAl = cmolAlKg == -1 ? -1 : parseFloat(elementPpmAl.value);
    }
    if (ppmAl == -1 && cmolAlKg == -1) {
        trueCalculation = [
            EMPTY_CALCULATION,
            EMPTY_CALCULATION
        ];
        return;
    }
    const THA_TO_LBFTSQ_CONSTANT = 20.481606212;
    const tHa = factor * cmolAlKg;
    const lbFtSq = tHa * THA_TO_LBFTSQ_CONSTANT;
    trueCalculation = [
        stringify(tHa) + ` ${textForPpmAl}`,
        stringify(lbFtSq) + ` ${textForCmolAlKg}\xb2`, 
    ];
}
const changeLanguageButton = document.querySelector("#switch-button");
changeLanguageButton.addEventListener('click', ()=>{
    if (lang == "es") {
        window.location.href = window.location.origin + window.location.pathname + "?lang=en";
    } else {
        window.location.href = window.location.origin + window.location.pathname + "?lang=es";
    }
});
const translationTargets = [
    (t1)=>document.title = t1,
    (t2)=>changeLanguageButton.value = t2,
    (t3)=>document.querySelector('#title>h1').innerHTML = t3,
    (t4)=>document.querySelector('[purpose="ppmAl"]>h2').innerHTML = t4,
    (t5)=>document.querySelector('[purpose="cmolAlKg"]>h2').innerHTML = t5,
    (t6)=>document.querySelector('[purpose="factor"]>h2').innerHTML = t6,
    (t7)=>textForPpmAl = t7,
    (t8)=>textForCmolAlKg = t8, 
];
const searchParams = new URLSearchParams(window.location.search);
let lang = (searchParams.get("lang") ?? "en").toLowerCase();
if (!(lang in translations)) {
    lang = "en";
}
const t = translations[lang];
for(let i = 0; i < t.length; i++){
    translationTargets[i](t[i]);
}

//# sourceMappingURL=data:application/json;base64,